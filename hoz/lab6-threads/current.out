[local ["Producer","Consumer","Summation","A","B","C"] [thread [Producer = proc {$ N Limit Out} [local ["EXU1"] [local ["EXU2","EXU3"] [EXU2 = N,EXU3 = Limit,"LT" "EXU2" "EXU3" "EXU1"],if EXU1 then [local ["T","N1"] [local ["EXU1","EXU2"] [EXU1 = N,EXU2 = T,Out = '|'(1:EXU1 2:EXU2)],local ["EXU1","EXU2"] [EXU1 = N,EXU2 = 1,"IntPlus" "EXU1" "EXU2" "N1"],local ["EXU1","EXU2","EXU3"] [EXU1 = N1,EXU2 = Limit,EXU3 = T,"Producer" "EXU1" "EXU2" "EXU3"]]] else [Out = nil()]]]],thread [Consumer = proc {$ P Out} [case P of nil() then [Out = nil()] else [case P of '|'(1:X 2:Xs) then [local ["T"] [local ["EXU1"] [local ["EXU2","EXU3"] [local ["EXU5","EXU6"] [EXU5 = X,EXU6 = 2,"Mod" "EXU5" "EXU6" "EXU2"],EXU3 = 0,"Eq" "EXU2" "EXU3" "EXU1"],if EXU1 then [local ["EXU1","EXU2"] [EXU1 = X,EXU2 = T,Out = '|'(1:EXU1 2:EXU2)],local ["EXU1","EXU2"] [EXU1 = Xs,EXU2 = T,"Consumer" "EXU1" "EXU2"]] else [local ["EXU1","EXU2"] [EXU1 = Xs,EXU2 = Out,"Consumer" "EXU1" "EXU2"]]]]] else [skip]]]],thread [Summation = proc {$ L EXU1} [case L of nil() then [EXU1 = 0] else [case L of '|'(1:X 2:Xs) then [local ["S"] [local ["EXU2","EXU3"] [EXU2 = X,local ["EXU5"] [EXU5 = Xs,"Summation" "EXU5" "EXU3"],"IntPlus" "EXU2" "EXU3" "EXU1"]]] else [skip]]]],local ["EXU1","EXU2","EXU3"] [EXU1 = 0,EXU2 = 100,EXU3 = A,"Producer" "EXU1" "EXU2" "EXU3"],local ["EXU1","EXU2"] [EXU1 = A,EXU2 = B,"Consumer" "EXU1" "EXU2"],local ["EXU1"] [EXU1 = B,"Summation" "EXU1" "C"],skip/BC]]