// 1) nested if, nested case
/*
local A B C in 
   A = false
   C = true

   if C then
      skip Browse A
   else
      if B then
         skip Basic
      else
         skip Basic
      end
   end

   case A of tree then
      skip Basic
   else
      case A of false then
         skip Basic
      else
         skip Basic
      end
      case A of true then
         skip Basic
      else
         skip Basic
      end
   end
end


// 2) more expressions; note that applications of primitive binary operators
//    ==, <, >, +, -, *, mod must be enclosed in parentheses (for hoz)

local A B C D B1 B2 in 
   A = 2
   B = 1
   D = 3
   {Eq A B B1}
   if B1 then
      skip Basic
   else
      skip Basic
   end
   {IntMinus D B C}
   {Eq A C B2}
   if B2 then
      skip Browse A
   else
      skip Basic
   end
end



// 3) "in" declaration 

local T X Y in
   T = tree(1:3 2:T)
   X = 5
   Y = 2
   local A B B1 One T in
      tree(1:A 2:B) = T
      One = 1
      {Eq One One B1}
      if B1 then
         local B Z in
            {IntMinus X Y B}
            skip Browse B
         end
      else
         skip Basic
      end
   end   
end


// 4) expressions in place of statements

local Fun R F Four in
   Four = 4
   Fun = proc {$ X F}
      F = X
   end
   {Fun Four R}
   skip Browse R
end
*/


// 5) Bind fun

local A B in
   skip Basic
   local C D E F G in
      C = 3
      D = 4
      E = 5
      G = '#'(1:B 2:B)
      A = rdc(1:D 2:B 3:G)
      {IntMinus C D F}
      {IntPlus E F B}
   end
   skip Browse A
   skip Browse B
   skip Store
end

/*
   In kernel syntax constants cannot exist in procedure calls and must be
      bound before they are passed as arguments. This means that there
      tends to be many more variables in kernel syntax than there are in
      sugar syntax. This makes kernel syntax much more verbose and
      prevents the use of common shortcuts such as not including the
      else part of an if else statement or putting a contant such as 4
      in a procedure such as {IntPlus A 4 B}. Variables must also be
      bound in the scope of local and cannot be bound inside of the
      local statement. Lastly tuples must be constructed using
      the symbol inside ' ' followed by the first and second value of
      the tuple as can be seen in line 101.
*/