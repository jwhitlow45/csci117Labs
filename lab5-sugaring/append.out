[local ["Append","L1","L2","Out","Reverse","Out1"] [Append = proc {$ Ls Ms EXU1} [case Ls of nil() then [EXU1 = Ms] else [case Ls of '|'(1:X 2:Lr) then [local ["Y"] [local ["EXU2","EXU3"] [EXU2 = Lr,EXU3 = Ms,"Append" "EXU2" "EXU3" "Y"],local ["EXU2","EXU3"] [EXU2 = X,EXU3 = Y,EXU1 = '|'(1:EXU2 2:EXU3)]]] else [skip]]],local ["EXU1","EXU2"] [EXU1 = 1,local ["EXU3","EXU4"] [EXU3 = 2,local ["EXU5","EXU6"] [EXU5 = 3,EXU6 = nil(),EXU4 = '|'(1:EXU5 2:EXU6)],EXU2 = '|'(1:EXU3 2:EXU4)],L1 = '|'(1:EXU1 2:EXU2)],local ["EXU1","EXU2"] [EXU1 = 4,local ["EXU3","EXU4"] [EXU3 = 5,local ["EXU5","EXU6"] [EXU5 = 6,EXU6 = nil(),EXU4 = '|'(1:EXU5 2:EXU6)],EXU2 = '|'(1:EXU3 2:EXU4)],L2 = '|'(1:EXU1 2:EXU2)],Reverse = proc {$ Xs EXU1} [case Xs of nil() then [EXU1 = nil()] else [case Xs of '|'(1:X 2:Xr) then [local ["A","B"] [local ["EXU2"] [EXU2 = Xr,"Reverse" "EXU2" "A"],local ["EXU2","EXU3"] [EXU2 = X,EXU3 = nil(),B = '|'(1:EXU2 2:EXU3)],local ["EXU2","EXU3"] [EXU2 = A,EXU3 = B,"Append" "EXU2" "EXU3" "EXU1"]]] else [skip]]],local ["EXU1","EXU2"] [EXU1 = L1,EXU2 = L2,"Append" "EXU1" "EXU2" "Out"],local ["EXU1"] [EXU1 = Out,"Reverse" "EXU1" "Out1"],skip/BOut,skip/BOut1,skip/f]]